#!/usr/bin/env python3
"""
Diagnostic script to check environment before starting the main application.
This script ensures all requirements are met, including SteamCMD installation.
"""

import os
import sys
import platform
import logging
import importlib.util
import subprocess
import time

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)

# Check if steamcmd_manager module exists
def check_steamcmd_manager():
    """Check if steamcmd_manager module is available and import it"""
    try:
        # Try to import the module
        spec = importlib.util.find_spec("steamcmd_manager")
        if spec is None:
            # Module doesn't exist, check if the file exists
            script_dir = os.path.dirname(os.path.abspath(__file__))
            module_path = os.path.join(script_dir, "steamcmd_manager.py")
            if not os.path.exists(module_path):
                logging.error(f"SteamCMD Manager module not found at {module_path}")
                return False, None
            
            # Import the module from file path
            spec = importlib.util.spec_from_file_location("steamcmd_manager", module_path)
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            return True, module
        else:
            # Module exists, import it
            import steamcmd_manager
            return True, steamcmd_manager
    except Exception as e:
        logging.error(f"Error importing SteamCMD Manager module: {str(e)}")
        return False, None

def check_directories():
    """Check if required directories exist and have proper permissions."""
    directories = [
        ('/app', 'Application directory'),
        ('/app/steamcmd', 'SteamCMD directory'),
        (os.environ.get('STEAM_DOWNLOAD_PATH', '/data/downloads'), 'Download directory'),
        ('/app/logs', 'Logs directory')
    ]

    for directory, description in directories:
        logging.info(f"Checking {description}: {directory}")
        if not os.path.exists(directory):
            try:
                os.makedirs(directory, exist_ok=True)
                logging.info(f"Created {directory}")
            except Exception as e:
                logging.error(f"Failed to create {directory}: {str(e)}")
                return False

        # Check permissions
        try:
            test_file = os.path.join(directory, '.permission_test')
            with open(test_file, 'w') as f:
                f.write('test')
            os.remove(test_file)
            logging.info(f"{description} is writable")
        except Exception as e:
            logging.error(f"{description} is not writable: {str(e)}")
            return False

    return True

def check_environment_variables():
    """Check if required environment variables are set."""
    required_vars = ['STEAM_DOWNLOAD_PATH']
    missing_vars = [var for var in required_vars if not os.environ.get(var)]

    if missing_vars:
        logging.error(f"Missing environment variables: {', '.join(missing_vars)}")
        return False

    logging.info("Environment variables are set.")
    return True

def check_dependencies():
    """Check if required system libraries are installed."""
    # Skip dependency check on Windows
    if platform.system() == "Windows":
        logging.info("Skipping system dependency check on Windows")
        return True
        
    dependencies = [
        ('/lib/x86_64-linux-gnu/libstdc++.so.6', 'lib32gcc-s1'),
        ('/usr/lib/x86_64-linux-gnu/libcurl.so.4', 'libcurl4'),
    ]

    missing_deps = [f"{package} ({path})" for path, package in dependencies if not os.path.exists(path)]

    if missing_deps:
        logging.error(f"Missing system dependencies: {', '.join(missing_deps)}")
        return False

    logging.info("All required system dependencies are installed.")
    return True

def check_python_modules():
    """Check if required Python modules are installed."""
    required_modules = ['gradio', 'requests', 'psutil', 'bs4', 'lxml']
    missing_modules = [module for module in required_modules if not _is_module_installed(module)]

    if missing_modules:
        logging.error(f"Missing Python modules: {', '.join(missing_modules)}")
        return False

    logging.info("All required Python modules are installed.")
    return True

def check_steamcmd_installation(steamcmd_manager):
    """Check if SteamCMD is installed and working properly"""
    try:
        # Get the SteamCMD manager instance
        manager = steamcmd_manager.get_instance()
        
        # Check if SteamCMD is installed
        if not manager.is_installed():
            logging.warning("SteamCMD not installed. Attempting to install...")
            if not manager.install():
                logging.error("Failed to install SteamCMD")
                return False
            logging.info("SteamCMD installed successfully")
        
        # Verify the installation
        if not manager.verify_installation():
            logging.warning("SteamCMD installation verification failed. Attempting to reinstall...")
            if not manager.install():
                logging.error("Failed to reinstall SteamCMD")
                return False
            
            # Verify again after reinstall
            if not manager.verify_installation():
                logging.error("SteamCMD installation verification failed after reinstall")
                return False
        
        logging.info("SteamCMD is installed and working properly")
        return True
        
    except Exception as e:
        logging.error(f"Error checking SteamCMD installation: {str(e)}")
        return False

def _is_module_installed(module_name):
    """Check if a Python module is installed."""
    try:
        __import__(module_name)
        return True
    except ImportError:
        return False

def main():
    """Run all checks and report status."""
    logging.info(f"Running initialization checks on {platform.platform()}")
    
    # First check if steamcmd_manager module is available
    manager_available, steamcmd_manager = check_steamcmd_manager()
    if not manager_available:
        logging.error("SteamCMD Manager module not available. Cannot proceed with checks.")
        return 1
    
    checks = [
        ("Environment variables", check_environment_variables()),
        ("Directories", check_directories()),
        ("System dependencies", check_dependencies()),
        ("Python modules", check_python_modules()),
        ("SteamCMD installation", check_steamcmd_installation(steamcmd_manager))
    ]

    all_passed = all(result for _, result in checks)
    
    logging.info("Check results:")
    
    for check_name, result in checks:
        status = "✅ PASSED" if result else "❌ FAILED"
        logging.info(f"{check_name}: {status}")

    if all_passed:
        logging.info("All checks passed! The application should start correctly.")
        return 0
    
    logging.error("Some checks failed. Please fix the issues before starting the application.")
    return 1

if __name__ == "__main__":
    sys.exit(main())